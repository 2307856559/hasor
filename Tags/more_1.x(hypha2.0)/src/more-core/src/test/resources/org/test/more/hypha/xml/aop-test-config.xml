<?xml version="1.0" encoding="utf-8"?>
<b:beans xmlns:b="http://project.byshell.org/more/schema/beans"
	 xmlns="http://project.byshell.org/more/schema/beans-aop">
<!-- 
	expression 用法：
		char		= w?
		pattern		= * | ?
		not			= !
		chars		= char* pattern* char*
		package		= (chars.)* chars
		param		= pattern | package
		params		= (param,)* param
		name		= not? chars
		method		= name(params);
		expression	= (method |)* method;
-->
	<b:classBean name="aop_listener"	class="org.test.more.hypha.xml.aop_bean.Aop_ALL_Listener"/>
	<b:classBean name="aop_before"		class="org.test.more.hypha.xml.aop_bean.Aop_Before"/>
	<b:classBean name="aop_returning"	class="org.test.more.hypha.xml.aop_bean.Aop_Returning"/>
	<b:classBean name="aop_throwing"	class="org.test.more.hypha.xml.aop_bean.Aop_Throwing"/>
	<b:classBean name="aop_filter" 		class="org.test.more.hypha.xml.aop_bean.Aop_Filter"/>

	<!-- 注册切点，注册不会起到任何作用 -->
	<pointcut 	name="aop_point_1" expression="toString();"/>			<!-- toString()方法 -->
	<pointcut 	name="aop_point_2" expression="addUser(int,org.User)"/>	<!-- addUser(int,org.test.User)方法 -->
	<pointcut 	name="aop_point_3" expression="*(*)"/>					<!-- 任意方法，任意参数 -->
	<pointcut 	name="aop_point_4" expression="*(?,?)"/>				<!-- 带有2个任意类型参数的任意方法 -->
	<pointcut 	name="aop_point_5" expression="*(?,?)|*(?)"/>			<!-- 带有1个或2个任意类型参数的任意方法 -->
	<pointcut 	name="aop_point_6" expression="*User(*,org.User)"/>		<!-- 以User结尾的，任意数量参数，但是最后一个参数必须是org.User -->
	<pointcut 	name="aop_point_7" expression="!*User(*)"/>				<!-- 排除任意方法名以User结尾的方法。 -->
	<pointGroup name="aop_point_8" rel="and|or|not">
		<pointcut expression="!*User(*)"/>
		<pointcut expression="*(?,?)"/>
	</pointGroup>

	<!-- =========================================================== -->
	<config name="aop_config_0"/>
	<!-- 内部pointcut -->
	<config name="aop_config_1" aopMode="Super|Propxy">
		<pointcut expression="*(*)"/>
		<informed	refBean="aop_listener"/>							<!-- 根据类实现的接口决定 -->
		<before		refBean="aop_before"/>
		<returning	refBean="aop_returning"/>
		<throwing	refBean="aop_throwing"/>
		<filter		refBean="aop_filter"/>
	</config>
	<!-- 外部pointcut -->
	<config name="aop_config_2">
		<!-- 根据类实现的接口决定 -->
		<informed	refBean="aop_listener"	pointcut-ref="aop_point_2"/>
		<before		refBean="aop_before"	pointcut-ref="aop_point_2"/>
		<returning	refBean="aop_returning"	pointcut-ref="aop_point_2"/>
		<throwing	refBean="aop_throwing"	pointcut-ref="aop_point_2"/>
		<filter		refBean="aop_filter"	pointcut-ref="aop_point_2"/>
	</config>
	<!-- 混合pointcut -->
	<config name="aop_config_3">
		<pointGroup>
			<pointcut expression="!*User(*)"/>
			<pointcut expression="*(?,?)"/>
		</pointGroup>
		<!-- 根据类实现的接口决定 -->
		<informed	refBean="aop_listener"/>
		<before		refBean="aop_before"/>
		<returning	refBean="aop_returning"/>
		<throwing	refBean="aop_throwing"	pointcut-ref="aop_point_2"/>
		<filter		refBean="aop_filter"	pointcut-ref="aop_point_2"/>
	</config>
	<!-- =========================================================== -->
	<!-- 混合pointcut -->
	<config name="aop_config_4">
		<pointGroup>
			<pointcut expression="!*User(*)"/>
			<pointcut expression="*(?,?)"/>
		</pointGroup>
		<before refBean="aop_before" method="refBeanMethod"/>
		<filter refBean="aop_filter" pointcut-ref="aop_point_5"/>
	</config>

	<!-- =========================================================== -->
	<!-- 将config配置应用到指定目标上，如果不指定则是应用到所有bean上 。toBean是指应用到指定bean上，toPackage是指应用到指定包上。-->
	<!-- 使用通配符即可，toBeanExp和toPackageExp属性前者优先级更高。-->
	<apply toBeanExp="c*" config="aop_config_4"/>
	<apply toPackageExp="org.more.*" config="aop_config_2"/>

<!--
	<templateBean name="testAop1" package="org.more.test.package">
		<config>
			<pointGroup>
				<pointcut expression="!*User(*)"/>
				<pointcut expression="*(?,?)"/>
			</pointGroup>
			<before refBean="before_1" method=""/>
			<filter refBean="filter_1" pointcut-ref="point_5"/>
		</config>
	</templateBean>
	<package package="user">
		<templateBean name="testAop2" useConfig="config_4"/>
		 如果name和id同时出现则name属性将会失去getBean时的索引效果。
		<templateBean id="testAop3" name="testAop3"/>
		<templateBean name="testAop4">
			<useConfig name="config_3"/>
		</templateBean>
	</package>
-->
</b:beans>