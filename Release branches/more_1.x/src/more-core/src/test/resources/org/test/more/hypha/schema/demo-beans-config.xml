<beans staticCache="0" dynamicCache="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="beansContext.xsd">
<!-- 
只引用Bean对象	：refBean
支持四种引用		：refValue
引用类型			：refType
类型				：type
基本类型值		：value
 -->
	<!-- 基本类型Bean，String -->
	<bean name="test_String" type="java.lang.String">
		<constructor-arg type="String" value="测试字符串" />
	</bean>
	<bean name="test_Boolean" type="java.lang.Boolean">
		<constructor-arg type="String" value="true" />
	</bean>

	<!-- 最简单Bean配置 -->
	<bean name="test_Simple" type="a.beanContextTest.testBeans.SimpleBean" />

	<!-- 单态配置 -->
	<bean name="test_Singleton" type="a.beanContextTest.testBeans.SimpleBean" singleton="true" />

	<!-- 延迟初始化配置 -->
	<bean name="test_Lazy" type="a.beanContextTest.testBeans.SimpleBean" lazyInit="false" />

	<!-- ===============================================================================================-->
	<!-- 基本数据类型的构造方法注入 -->
	<bean name="test_Const_1" type="a.beanContextTest.testBeans.ConstructorBean">
		<constructor-arg type="int" value="123" />
		<constructor-arg type="float" value="3.14" />
		<constructor-arg type="String" value="测试字符串" />
	</bean>
	
	<!-- 构造方法引用类型属性注入 -->
	<bean name="test_Const_2" type="a.beanContextTest.testBeans.ConstructorBean">
		<constructor-arg refValue="test_prop_1" />
	</bean>

	<!-- 使用more关键字进行注入，注意使用refValue属性之后可以不指定。 -->
	<bean name="test_Const_3" type="a.beanContextTest.testBeans.ConstructorBean">
		<meta key="msg" value="附带的甜点信息字符串" />
		<constructor-arg type="String" refValue="{@0}" />
		<!--@0意在在执行getBean()时候第二个附带参数数组中将下标为0的对象作为数据注入-->
		<constructor-arg type="java.lang.Object" refValue="{#this}" />
		<!--#this意在将ioc容器BeanFactory作为数据注入-->
		<constructor-arg refValue="{$msg}" /><!-- 注入meta数据 -->
	</bean>
	<!-- ===============================================================================================-->
	<!-- 基本数据类型属性注入 -->
	<bean name="test_prop_1" type="a.beanContextTest.testBeans.PropBean">
		<property name="a" type="int" value="123" />
		<property name="b" type="float" value="3.14" />
		<property name="c" type="String" value="测试字符串" />
	</bean>

	<!-- 引用类型属性注入 -->
	<bean name="test_prop_2" type="a.beanContextTest.testBeans.PropBean">
		<property name="bean" refValue="test_prop_1" />
	</bean>

	<!-- 使用more关键字进行注入 -->
	<bean name="test_prop_3" type="a.beanContextTest.testBeans.PropBean">
		<meta key="msg" value="附带的甜点信息字符串" />
		<property name="arg_0" type="String" refValue="{@0}" />
		<!--@0意在在执行getBean()时候第二个附带参数数组中将下标为0的对象作为数据注入-->
		<property name="arg_1" type="java.lang.Object" refValue="{#this}" />
		<!--#this意在将ioc容器BeanFactory作为数据注入-->
		<property name="arg_2" refValue="{$msg}" /><!-- 注入meta数据 -->
	</bean>

	<!--===============================================================================================-->
	<!-- 大文本注入 -->
	<bean name="test_bigString_1" type="a.beanContextTest.testBeans.PropBean">
		<property name="c" type="String">
			<value><![CDATA[
id="" value="12" refValue="refBean|{#attName}|{@number}|{$mime}" type="int|byte|char|double|float|long|short|boolean|String"
id="" refValue="refBean|{#attName}|{@number}|{$mime}" type="int|byte|char|double|float|long|short|boolean|String"
				]]></value>
			<!-- 注意CDATA标记与value标签之间应当紧凑否则可能注入错误的数据。 -->
		</property>
	</bean>
	<!-- 大文本注入2 -->
	<bean name="test_bigString_2" type="a.beanContextTest.testBeans.PropBean">
		<property name="c" type="String">
			<value>注意CDATA标记与value标签之间应当紧凑否则可能注入错误的数据。</value>
		</property>
	</bean>


	<!-- 三种数组类型注入 -->
	<bean name="test_array_1" type="a.beanContextTest.testBeans.PropBean">
		<meta key="msg" value="附带在Bean上" />
		<property name="intArray" type="int">
			<array>
				<value value="1" />
				<value value="2" />
				<value value="3" />
				<value value="4" />
			</array>
		</property>
		<property name="stringArray" type="String">
			<meta key="msg" value="附带的甜点信息字符串" />
			<array>
				<value value="字符串1" />
				<value type="String" refValue="{@0}" />
				<value refValue="test_String" />
				<value refValue="{$msg}" />
			</array>
		</property>
		<property name="objectArray" type="a.beanContextTest.testBeans.PropBean">
			<array>
				<value refValue="test_bigString_2" />
				<value refValue="test_prop_3" />
			</array>
		</property>
	</bean>
	<!-- 三种数组类构造方法注入 -->
	<bean name="test_array_2" type="a.beanContextTest.testBeans.ConstructorBean">
		<meta key="msg" value="附带在Bean上" />
		<constructor-arg type="int">
			<meta key="msg" value="附带在构造方法上" />
			<array>
				<value value="1" />
				<value value="2" />
				<value value="3" />
				<value value="4" />
			</array>
		</constructor-arg>
		<constructor-arg type="String">
			<!-- 去掉下面msg的声明，more将会使用bean标签下的msg作为注入 -->
			<meta key="msg" value="附带的甜点信息字符串" />
			<array>
				<value value="字符串1" />
				<value type="String" refValue="{@0}" />
				<value refValue="test_String" />
				<value refValue="{$msg}" />
			</array>
		</constructor-arg>
		<constructor-arg type="a.beanContextTest.testBeans.PropBean">
			<array>
				<value refValue="test_bigString_2" />
				<value refValue="test_prop_3" />
			</array>
		</constructor-arg>
	</bean>

	<!--===============================================================================================-->
	<!-- map，list，set 可以不指定type属性，array不具备type属性 -->
	<!-- Map类型的注入 -->
	<bean name="test_map" type="a.beanContextTest.testBeans.CollectionBean">
		<property name="objectMap" type="java.util.Map">
			<map type="java.util.Hashtable">
				<entry>
					<mapKey>
						<value type="String" value="test_bigString_2" />
					</mapKey>
					<mapVar>
						<value refValue="test_prop_3" />
					</mapVar>
				</entry>
			</map>
		</property>
	</bean>


	<!-- List类型的注入 -->
	<bean name="test_list" type="a.beanContextTest.testBeans.CollectionBean">
		<property name="objectList" type="java.util.List">
			<list type="java.util.LinkedList">
				<value type="String" value="test_bigString_2" />
				<value refValue="test_prop_3" />
			</list>
		</property>
	</bean>


	<!-- Set类型的注入 -->
	<bean name="test_set" type="a.beanContextTest.testBeans.CollectionBean">
		<property name="objectSet" type="java.util.Set">
			<set type="java.util.LinkedHashSet">
				<value type="String" value="test_bigString_2" />
				<value refValue="test_prop_3" />
			</set>
		</property>
	</bean>
	
	<!--===============================================================================================-->
	<!-- 工厂方式创建 -->
	<bean name="test_Factory_Factory" type="a.beanContextTest.testBeans.BeanFactory"/>
	<!-- 静态工厂方法 -->
	<bean name="test_Factory_Static" type="a.beanContextTest.testBeans.ConstructorBean">
		<factoryConfig refBean="test_Factory_Factory" isStaticMethod="true" methodName="sCreate">
			<methodParam value="字符串" type="String" />
		</factoryConfig>
	</bean>
	<!-- 普通工厂方法 -->
	<bean name="test_Factory_Object" type="a.beanContextTest.testBeans.ConstructorBean">
		<factoryConfig refBean="test_Factory_Factory" isStaticMethod="false" methodName="oCreate">
			<methodParam refValue="test_String"/>
		</factoryConfig>
	</bean>
	
	<!--===============================================================================================-->
	<!-- 附加接口实现 -->
	<bean name="test_interface" type="a.beanContextTest.testBeans.Face"/>
	<bean name="test_implDelegate" type="a.beanContextTest.testBeans.ImplDelegate"/>
	<bean name="test_impl_1" type="a.beanContextTest.testBeans.SimpleBean">
		<addImpl refType="test_interface" delegate-refBean="test_implDelegate" />
	</bean>
	<bean name="test_impl_2" type="a.beanContextTest.testBeans.SimpleBean">
		<addImpl type="a.beanContextTest.testBeans.Face" delegate-refBean="test_implDelegate" />
	</bean>
	
	
	<!-- AOP -->
	<bean name="test_aopFilter_1" type="a.beanContextTest.testBeans.AOPFilter"/>
	<bean name="test_aopFilter_2" type="a.beanContextTest.testBeans.AOPFilter"/>
	<bean name="test_aop" type="a.beanContextTest.testBeans.SimpleBean" aopFilters-refBean="test_aopFilter_1,test_aopFilter_2">
		<addImpl type="a.beanContextTest.testBeans.Face" delegate-refBean="test_implDelegate" />
	</bean>
	
	<!-- {$msg}类型注入仅支持标签property、bean、constructor-arg -->
	

	<!--
	<bean 	id="beanID_0"
			name="test_1"
			type="int|byte|char|double|float|long|short|boolean|String|java.lang.Object"
			singleton="true(default)|false"
			iocType="Export|Ioc(default)|Fact"
			export-refBean="beanName"
			lazyInit="true(default)|false"
			aopFilters-refBean="xxx,xxx,xxx">
		
		附加值属性信息
		<meta
			key="ok"
			value="ok" />
		
		工厂方式创建配置节
		<factoryConfig
			refBean="test_Factory_Factory"
			isStaticMethod="true(default)|false"
			methodName="oCreate">
			
			工厂方法参数
			<methodParam
				id="beanID_0"
				value="字符串"
				refValue="refBean|{#attName}|{@number}|{$mime}"
				type="int|byte|char|double|float|long|short|boolean|String|java.lang.Object"/>
		</factoryConfig>
		
		属性配置
		<property
			id="beanID_0"
			name="objectList"
			value="字符串"
			refValue="refBean|{#attName}|{@number}|{$mime}"
			type="int|byte|char|double|float|long|short|boolean|String|java.lang.Object">
			
			
			<value><![CDATA[]]></value>
			<value>字符串</value>
			
			<array>
				包含的子标签：<value/>、<array/>、<list/>、<set/>、<map/>
			</array>
			
			<list type="">
				包含的子标签：<value/>、<array/>、<list/>、<set/>、<map/>
			</list>
			
			<set type="">
				包含的子标签：<value/>、<array/>、<list/>、<set/>、<map/>
			</set>
			
			map类型数据注入
			<map type="">
				包含的子标签：<value/>、<array/>、<list/>、<set/>、<map/>
			</map>
			
			附加值属性信息
			<meta
				key="ok"
				value="ok" />
		</property>
		
		附加接口实现配置节
		<addImpl
			id="1"
			type="java.util.List"
			refType=""
			delegate-refBean="a"/>
	</bean>
	-->
</beans>