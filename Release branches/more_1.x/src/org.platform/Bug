//public class ELUtil {
//    public static Map<String, Node> cacheNode = new java.util.Hashtable<String, Node>();
//    public static Object evalOGNL(String expressionString, Object root) throws OgnlException {
//        Node expressionNode = cacheNode.get(expressionString);
//        if (expressionNode == null) {
//            expressionNode = (Node) Ognl.parseExpression(expressionString);
//            cacheNode.put(expressionString, expressionNode);
//        }
//        OgnlContext oc = new OgnlContext();
//        oc.setCurrentObject(root);
//        return expressionNode.getValue(oc, root);
//    };
//    public static Node parserNode(String expressionString) throws OgnlException {
//        Node expressionNode = cacheNode.get(expressionString);
//        if (expressionNode == null) {
//            expressionNode = (Node) Ognl.parseExpression(expressionString);
//            cacheNode.put(expressionString, expressionNode);
//        }
//        return expressionNode;
//    };
//}
-------------------------------------------------------------------------------------------------------------------------------计划的
Bug:
  1.classcode-目前生称的方法中不支持基本类型。原因不明。
  2.classcode-对于重复使用ClassCode的字节码修改有异常。
/-----------------------------------------------/
more core
  1.增加了ognl表达式语言框架。
  2.恢复被删除的Base64js文件.
  3.删除重复的功能类SimpeCode.
  4.使Base64可以获取到base64.js的Reader流.
  5.增加xml软件包
  	1.提供了三种xml访问级别。
  	2.可以针对xml命名空间进行解析。
  6.增加了Global全局配置文件读取器，通过它可以在配置文件中配置json格式的数据，它还支持同时装载多个配置文件。并且可以独立访问每个配置文件。
  7.删除了 json
  8.删除了 copybean
classcode v2.0
  1.升级classcode代码，全部重写相关代码。目前版本v2.0
  2.可以在对象上增加一个任意属性并且可以通过属性策略指定其readonly特性。
  3.可以增加一个代理属性，通过接口实现的方法来操控属性的get、set。
  4.增加了before,returnning,throwing三个切点的监听器。
  5.改进了aopFilter接口注入的方法。
classvisit v1.0
  1.以访问者模式的方式迭代一个类。

org.platform v1.0
	1.说明：
		1).轻量化开发框架-Web应用方向。
		2).DI容器采用Guice。
	2.org.platform.binder 软件包
		1).60%源码参考Guice-Servlet实现。
		2).提供了HttpServlet、Filter、HttpSessionListener、HttpError接口的注册支持。
	3.org.platform.context 软件包。
		1).InitContext	初始化环境：启动参数、注册配置文件监听器
		2).AppContext	应用环境：Bean创建
		3).ViewContext	http请求环境：隔离请求作用域。
		4).支持多配置文件合并功能：config.xml、static-config.xml
		5).支持通过属性配置文件config-mapping.properties映射配置文件名称。
	4.org.platform.icache 软件包。
		1).支持通过注解缓存方法返回值。
		2).方法缓存：在生成缓存key时候可以依照不同类型自行编写Key生成代码。
		3).支持注解方式配置新的Cache和默认Cache
		4).内置WeakMapCache
		5).内置Date、Object类型的Key生成器
		6).通过标记@NeedCache增加缓存功能，可以标记在类和方法上
	5.org.platform.security 软件包。
		1).
	6.org.platform.web 软件包。
		1).
	7.org.platform.datasource 软件包。
		1).数据源功能支持，支持定义多套数据源。
	






            String value = URLEncoder.encode(user.getLoginName() + "@" + user.getId(), "UTF-8");
