/*
 * Copyright 2008-2009 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.more.util.attribute;
import org.more.NoDefinitionException;
import org.more.RepeateException;
/**
 * 扩展属性装饰器，该装饰器实现了IExtAttribute接口的功能。
 * Date : 2009-4-30
 * @author 赵永春
 */
public class ExtAttDecorator extends AbstractAttDecorator implements IExtAttribute {
    /** 属性替换策略 */
    private int replaceMode = IExtAttribute.ReplaceMode_Replace;
    /**
     * 扩展属性装饰器，该装饰器实现了IExtAttribute接口的功能。替换策略是由IExtAttribute接口定义。
     * 该方法将采用默认策略IExtAttribute.ReplaceMode_Replace。
     * @param source 要装饰的目标属性对象。
     */
    public ExtAttDecorator(IAttribute source) {
        super(source);
    }
    /**
     * 构造一个属性装饰器，该装饰器的主要功能是增加属性对象对替换策略的支持。替换策略是由IExtAttribute接口定义。
     * @param source 要装饰的目标属性对象。
     * @param replaceMode 要更改的替换策略策略值，该值必须是IExtAttribute.ReplaceMode所定义的。
     *                   如果使用了一个不存在的值进行定义则会引发NoDefinitionException异常。
     * @throws NoDefinitionException 定义了一个不存在的属性策略。
     */
    public ExtAttDecorator(IAttribute source, int replaceMode) throws NoDefinitionException {
        super(source);
        this.setReplacMode(replaceMode);
    }
    @Override
    public int getReplaceMode() {
        return this.replaceMode;
    }
    /**
     * 改变扩展属性实现类中属性替换策略。
     * @param replaceMode 要更改的替换策略策略值，该值必须是IExtAttribute.ReplaceMode所定义的。
     *                   如果使用了一个不存在的值进行定义则会引发NoDefinitionException异常。
     * @throws NoDefinitionException 定义了一个不存在的属性策略。
     */
    protected void setReplacMode(int replaceMode) throws NoDefinitionException {
        if (replaceMode == IExtAttribute.ReplaceMode_Original || replaceMode == IExtAttribute.ReplaceMode_Replace || replaceMode == IExtAttribute.ReplaceMode_Throw)
            this.replaceMode = replaceMode;
        else
            throw new NoDefinitionException("不支持的属性替换策略 " + replaceMode);
    }
    public void setAttribute(String name, Object value) throws RepeateException {
        if (this.getSource().contains(name) == true)
            switch (this.replaceMode) {
            case IExtAttribute.ReplaceMode_Original://保留原始属性
                break;
            case IExtAttribute.ReplaceMode_Throw://抛出异常
                throw new RepeateException("已经存在的属性 " + name);
            default://ExtAttribute.ReplaceMode_Replace 无条件替换
                this.getSource().setAttribute(name, value);
            }
        else
            this.getSource().setAttribute(name, value);
    }
}
